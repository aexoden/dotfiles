#!/usr/bin/env bash
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Output Functions
#-------------------------------------------------------------------------------

info () {
	printf "\r  [ \e[0;34m..\e[0m ] $1\n"
}

userinput () {
	printf "\r  [ \e[0;33m??\e[0m ] $1 "
}

success () {
	printf "\r\e[2K  [ \e[0;32mOK\e[0m ] $1\n"
}

fail () {
	printf "\r\e[2K  [\e[0;31mFAIL\e[0m] $1\n"
	echo
	exit
}

#-------------------------------------------------------------------------------
# General Functions
#-------------------------------------------------------------------------------

install_dotfiles () {
	info 'Installing dotfiles...'

	local overwrite_all=false
	local backup_all=false
	local skip_all=false

	for src in $(find -H "$DOTFILES_ROOT" -name '*.symlink' -not -path '*.git*') ; do
		dst="$HOME/.$(basename "${src%.*}")"
		dst="${dst//__/\/}"
		link_file "$src" "$dst"
	done
}

link_file () {
	local src=$1
	local dst=$2

	local overwrite=
	local backup=
	local skip=

	local action=

	local dst_dir=$(dirname $dst)

	if [ ! -d $dst_dir ] ; then
		mkdir -p $dst_dir
	fi

	if [ -f "$dst" -o -d "$dst" -o -L "$dst" ] ; then
		if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ] ; then
			local current_src="$(readlink -f $dst)"
			local compare_src=$src

			if [ -L "$compare_src" ] ; then
				compare_src=$(readlink -f $compare_src)
			fi

			if [ "$current_src" == "$compare_src" ]; then
				skip=true
			else
				userinput "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
		[s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
				read -n 1 action

				case "$action" in
					o)
						overwrite=true
						;;
					O)
						overwrite_all=true
						;;
					b)
						backup=true
						;;
					B)
						backup_all=true
						;;
					s)
						skip=true
						;;
					S)
						skip_all=true
						;;
					*)
						;;
				esac
			fi
		fi

		overwrite=${overwrite:-$overwrite_all}
		backup=${backup:-$backup_all}
		skip=${skip:-$skip_all}

		if [ "$overwrite" == "true" ] ; then
			rm -rf "$dst"
			success "Removed $dst"
		fi

		if [ "$backup" == "true" ] ; then
			mv "$dst" "${dst}.backup"
			success "Moved $dst to ${dst}.backup"
		fi

		if [ "$skip" == "true" ] ; then
			success "Skipped $src"
		fi
	fi

	if [ "$skip" != "true" ] ; then
		ln -sr "$src" "$dst"
		success "Symlinked $dst -> $src"
	fi
}

setup_gitconfig () {
	GITCONFIG_LOCAL=topics/git/config__git__config.local.symlink

	if ! [ -f $GITCONFIG_LOCAL ] ; then
		info 'Configuring git...'

		userinput ' * What is your GitHub author name?'
		read -e git_authorname

		userinput ' * What is your GitHub author email address?'
		read -e git_authoremail

		cat <<EOF > $GITCONFIG_LOCAL
[user]
	name = $git_authorname
	email = $git_authoremail
EOF

		userinput ' * What is your GPG signing key fingerprint (blank for none)?'
		read -e git_signingkey

		if [ ! -z "$git_signingkey" ] ; then
			echo "	signingkey = $git_signingkey" >> $GITCONFIG_LOCAL

			userinput ' * Do you want to sign commits by default (Y/n)?'
			read -e git_sign_by_default

			case "$git_sign_by_default" in
				[nN])
					;;
				*)
					echo "[commit]" >> $GITCONFIG_LOCAL
					echo "	gpgSign = true" >> $GITCONFIG_LOCAL
					;;
			esac
		else
			echo
		fi

		success 'git configured!'
	fi
}

#-------------------------------------------------------------------------------
# Main Execution
#-------------------------------------------------------------------------------

# Change to the root dotfiles directory.
cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

# Exit immediately if a command returns a non-zero status.
set -e

# Do the actual setup.
setup_gitconfig
install_dotfiles
